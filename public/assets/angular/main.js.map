{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/guards/is-authenticated.guard.ts","./src/app/guards/is-guest.guard.ts","./src/app/interceptors/http-error.interceptor.ts","./src/app/interceptors/http-xsrf.interceptor.ts","./src/app/modules/authentication/authentication.module.ts","./src/app/modules/authentication/authentication.service.ts","./src/app/modules/authentication/login-form/login-form.component.ts","./src/app/modules/authentication/login-form/login-form.component.html","./src/app/modules/authentication/register-form/register-form.component.ts","./src/app/modules/authentication/register-form/register-form.component.html","./src/app/pages/landing-page/landing-page.component.ts","./src/app/pages/landing-page/landing-page.component.html","./src/app/pages/login-page/login-page.component.ts","./src/app/pages/login-page/login-page.component.html","./src/app/pages/register-page/register-page.component.ts","./src/app/pages/register-page/register-page.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {LoginPageComponent} from './pages/login-page/login-page.component';\nimport {LandingPageComponent} from './pages/landing-page/landing-page.component';\nimport {IsAuthenticatedGuard} from './guards/is-authenticated.guard';\nimport {RegisterPageComponent} from './pages/register-page/register-page.component';\nimport {IsGuestGuard} from './guards/is-guest.guard';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginPageComponent,\n    canActivate: [IsGuestGuard]\n  },\n  {\n    path: 'register',\n    component: RegisterPageComponent,\n    canActivate: [IsGuestGuard]\n  },\n  {\n    path: 'landing',\n    component: LandingPageComponent,\n    canActivate: [IsAuthenticatedGuard]\n  },\n  {\n    path: '**',\n    redirectTo: 'landing',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Secret Santa 2k22';\n}\n","<router-outlet></router-outlet>\n","import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {LoginPageComponent} from './pages/login-page/login-page.component';\nimport {LandingPageComponent} from './pages/landing-page/landing-page.component';\nimport {AuthenticationModule} from './modules/authentication/authentication.module';\nimport {RegisterPageComponent} from './pages/register-page/register-page.component';\nimport {APP_BASE_HREF} from '@angular/common';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {HttpXsrfInterceptor} from './interceptors/http-xsrf.interceptor';\nimport {HttpErrorInterceptor} from './interceptors/http-error.interceptor';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginPageComponent,\n    LandingPageComponent,\n    RegisterPageComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    AuthenticationModule\n  ],\n  providers: [\n    {provide: APP_BASE_HREF, useValue: '/'},\n    {provide: HTTP_INTERCEPTORS, useClass: HttpXsrfInterceptor, multi: true},\n    {provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true},\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable, take, tap} from 'rxjs';\nimport {AuthenticationService} from '../modules/authentication/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IsAuthenticatedGuard implements CanActivate {\n  constructor(private authenticationService: AuthenticationService, private router: Router) {\n\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authenticationService.isAuthenticated$.pipe(\n      take(1),\n      tap(isAuthenticated => {\n        if (isAuthenticated === false) {\n          this.router.navigate(['/login']);\n        }\n      })\n    );\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {map, Observable, take, tap} from 'rxjs';\nimport {AuthenticationService} from '../modules/authentication/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IsGuestGuard implements CanActivate {\n  constructor(private authenticationService: AuthenticationService, private router: Router) {\n\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authenticationService.isAuthenticated$.pipe(\n      take(1),\n      map(isAuthenticated => !isAuthenticated),\n      tap(isGuest => {\n        if (isGuest === false) {\n          this.router.navigate(['/']);\n        }\n      })\n    );\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor, HttpErrorResponse\n} from '@angular/common/http';\nimport {Observable, tap} from 'rxjs';\n\nexport class HttpError {\n  static BadRequest = 400;\n  static Unauthorized = 401;\n  static Forbidden = 403;\n  static NotFound = 404;\n  static TimeOut = 408;\n  static Conflict = 409;\n  static InternalServerError = 500;\n}\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n  constructor() {\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      tap({\n        error: (exception) => {\n          if (exception instanceof HttpErrorResponse) {\n            switch (exception.status) {\n\n              case HttpError.BadRequest:\n                console.error('Bad Request 400', exception);\n                break;\n\n              case HttpError.Unauthorized:\n                console.error('Unauthorized 401', exception);\n                break;\n\n              case HttpError.NotFound:\n                //show error toast message\n                console.error('Not Found 404', exception);\n                break;\n\n              case HttpError.TimeOut:\n                // Handled in AnalyticsExceptionHandler\n                console.error('TimeOut 408', exception);\n                break;\n\n              case HttpError.Forbidden:\n                console.error('Forbidden 403', exception);\n                break;\n\n              case HttpError.InternalServerError:\n                console.error('big bad 500', exception);\n                break;\n\n              default:\n                console.error('any error', exception);\n                break;\n            }\n          }\n        }\n      })\n    )\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpXsrfTokenExtractor\n} from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  headerName = 'X-XSRF-TOKEN';\n\n  constructor(private tokenService: HttpXsrfTokenExtractor) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (req.method === 'GET' || req.method === 'HEAD') {\n      return next.handle(req);\n    }\n\n    const token = this.tokenService.getToken();\n\n    // Be careful not to overwrite an existing header of the same name.\n    if (token !== null && !req.headers.has(this.headerName)) {\n      req = req.clone({headers: req.headers.set(this.headerName, token)});\n    }\n    return next.handle(req);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginFormComponent } from './login-form/login-form.component';\nimport { RegisterFormComponent } from './register-form/register-form.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\n\n\n\n@NgModule({\n  declarations: [\n\n    LoginFormComponent,\n    RegisterFormComponent\n  ],\n  exports: [\n    LoginFormComponent,\n    RegisterFormComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ]\n})\nexport class AuthenticationModule { }\n","import {Injectable} from '@angular/core';\nimport {ReplaySubject, tap} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\n\nconst RegisterEndpoint = 'register';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  public isAuthenticated$ = new ReplaySubject<boolean>(1)\n\n  constructor(private httpClient: HttpClient) {\n    this.isAuthenticated$.next(false);\n  }\n\n  public register$(params: { username: string; name: string, password: string }) {\n    return this.httpClient.post(environment.apiBaseUrl + RegisterEndpoint, params).pipe(\n      tap((user) => {\n        console.log('authentication.service::22::user', user);\n      })\n    )\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss']\n})\nexport class LoginFormComponent implements OnInit {\n  public loginForm = this.formBuilder.group({\n    pseudonyme: ['', [Validators.required, Validators.minLength(3)]],\n    password: ['', [Validators.required]],\n    rememberMe: [false]\n  });\n\n  public submitted = false;\n\n  constructor(private formBuilder: FormBuilder) {\n  }\n\n  public onSubmit() {\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    if (this.submitted) {\n    }\n  }\n\n  public ngOnInit() {\n  }\n}\n","<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"loginForm\">\n  <div>\n    <label for=\"pseudonyme\">Pseudonyme</label>\n    <input\n      [ngClass]=\"{ 'invalid': submitted && loginForm.controls.pseudonyme.errors }\"\n      formControlName=\"email\"\n      id=\"pseudonyme\"\n      placeholder=\"pseudonyme\">\n    <div *ngIf=\"submitted && loginForm.controls.pseudonyme.errors\">\n      <div *ngIf=\"loginForm.controls.pseudonyme.errors['required']\">Ton pseudo est requis</div>\n    </div>\n  </div>\n  <div>\n    <label for=\"password\">Mot de passe</label>\n    <input\n      [ngClass]=\"{ 'invalid': submitted && loginForm.controls.password.errors }\"\n      formControlName=\"password\"\n      id=\"password\"\n      placeholder=\"mot de passe\"\n      type=\"password\">\n    <div *ngIf=\"submitted && loginForm.controls.password.errors\">\n      <div *ngIf=\"loginForm.controls.password.errors['required']\">Le mot de passe est requis</div>\n    </div>\n  </div>\n  <div>\n    <label for=\"rememberMe\">\n      Se souvenir de moi\n    </label>\n    <input\n      formControlName=\"rememberMe\"\n      type=\"checkbox\"\n      id=\"rememberMe\">\n  </div>\n\n  <button type=\"submit\">Se connecter</button>\n</form>\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-register-form',\n  templateUrl: './register-form.component.html',\n  styleUrls: ['./register-form.component.scss']\n})\nexport class RegisterFormComponent implements OnInit {\n\n  @Output() onSubmit = new EventEmitter<{\n    username: string,\n    name: string,\n    password: string,\n    password_confirmation: string\n  }>()\n\n  public registerForm = this.formBuilder.group({\n    username: ['', [Validators.required, Validators.minLength(3)]],\n    name: ['', [Validators.required, Validators.minLength(3)]],\n    password: ['', [Validators.required, Validators.minLength(8)]],\n    password_confirmation: ['', [Validators.required]]\n  });\n\n  public submitted = false;\n\n  constructor(private formBuilder: FormBuilder) {\n  }\n\n  public submit() {\n    this.submitted = true;\n\n    if (this.registerForm.valid) {\n      this.onSubmit.emit({\n        username: this.registerForm.value.username!,\n        name: this.registerForm.value.name!,\n        password: this.registerForm.value.password!,\n        password_confirmation: this.registerForm.value.password_confirmation!\n      });\n    }\n  }\n\n  public ngOnInit() {\n  }\n}\n","<form (ngSubmit)=\"submit()\" [formGroup]=\"registerForm\">\n  <div>\n    <label for=\"username\">Identifiant (pour te connecter)</label>\n    <input\n      [ngClass]=\"{ 'invalid': submitted && registerForm.controls.username.errors }\"\n      formControlName=\"username\"\n      id=\"username\"\n      placeholder=\"username\">\n    <div *ngIf=\"submitted && registerForm.controls.username.errors\">\n      <div *ngIf=\"registerForm.controls.username.errors['required']\">Ton pseudo est requis</div>\n    </div>\n  </div>\n  <div>\n    <label for=\"name\">Prénom (pour que les autres te reconnaissent)</label>\n    <input\n      [ngClass]=\"{ 'invalid': submitted && registerForm.controls.name.errors }\"\n      formControlName=\"name\"\n      id=\"name\"\n      placeholder=\"name\">\n    <div *ngIf=\"submitted && registerForm.controls.name.errors\">\n      <div *ngIf=\"registerForm.controls.name.errors['required']\">Ton pseudo est requis</div>\n    </div>\n  </div>\n  <div>\n    <label for=\"password\">Mot de passe</label>\n    <input\n      [ngClass]=\"{ 'invalid': submitted && registerForm.controls.password.errors }\"\n      formControlName=\"password\"\n      id=\"password\"\n      placeholder=\"mot de passe\"\n      type=\"password\">\n    <div *ngIf=\"submitted && registerForm.controls.password.errors\">\n      <div *ngIf=\"registerForm.controls.password.errors['required']\">Le mot de passe est requis</div>\n    </div>\n  </div>\n  <div>\n    <label for=\"password_confirmation\">Confirmation du mot de passe</label>\n    <input\n      [ngClass]=\"{ 'invalid': submitted && registerForm.controls.password_confirmation.errors }\"\n      formControlName=\"password_confirmation\"\n      id=\"password_confirmation\"\n      placeholder=\"mot de passe\"\n      type=\"password\">\n    <div *ngIf=\"submitted && registerForm.controls.password_confirmation.errors\">\n      <div *ngIf=\"registerForm.controls.password_confirmation.errors['required']\">Le mot de passe est requis</div>\n      <div *ngIf=\"registerForm.controls.password_confirmation.errors['same']\">Les mots de passe ne correspondent pas</div>\n    </div>\n  </div>\n\n  <button type=\"submit\">S'inscrire</button>\n</form>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.component.html',\n  styleUrls: ['./landing-page.component.scss']\n})\nexport class LandingPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>landing-page works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss']\n})\nexport class LoginPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-login-form></app-login-form>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AuthenticationService} from '../../modules/authentication/authentication.service';\n\n@Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.scss']\n})\nexport class RegisterPageComponent implements OnInit {\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private authenticationService: AuthenticationService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  public registerFormSubmit(formValues: { username: string; name: string, password: string, password_confirmation: string }) {\n    this.authenticationService\n      .register$({\n        ...formValues\n      })\n      .subscribe((user) => {\n        if (user) {\n          console.log('register-page.component::27::user', user);\n        }\n      });\n  }\n}\n","<app-register-form (onSubmit)=\"registerFormSubmit($event)\"></app-register-form>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiBaseUrl: 'http://secret-santa-2k22.lndo.site/api/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}